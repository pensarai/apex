import { useState } from "react";
import { useKeyboard } from "@opentui/react";
import Input from "../input";
import { useCommand } from "../../command-provider";
import AgentDisplay from "../agent-display";
import useThoroughPentestAgent from "../hooks/thoroughPentestAgent";

export default function ThoroughPentestAgentDisplay() {
  const [focusedIndex, setFocusedIndex] = useState(0);
  const { closeThoroughPentest } = useCommand();

  // Use the custom hook for thorough pentest with subagent tracking
  const {
    target,
    setTarget,
    messages,
    hasStarted,
    isCompleted,
    sessionPath,
    subagents,
    abortController,
    isExecuting,
    beginExecution,
    openReport,
  } = useThoroughPentestAgent();

  const inputs = ["target", "objective"]; // List of input fields

  useKeyboard((key) => {
    // Escape - Close thorough pentest display
    if (key.name === "escape") {
      closeThoroughPentest();
      return;
    }

    // Ctrl+C - Abort execution if running
    if (key.ctrl && key.name === "c" && isExecuting && !isCompleted) {
      if (abortController) {
        abortController.abort();
      }
      return;
    }

    // Enter - View report when completed
    if (isCompleted && key.name === "return") {
      openReport();
      return;
    }

    // Don't allow navigation if streaming has started
    if (hasStarted) {
      return;
    }

    // Tab - Next field
    if (key.name === "tab" && !key.shift) {
      setFocusedIndex((prev) => (prev + 1) % inputs.length);
      return;
    }

    // Shift+Tab - Previous field
    if (key.name === "tab" && key.shift) {
      setFocusedIndex((prev) => (prev - 1 + inputs.length) % inputs.length);
      return;
    }

    // Enter - Begin execution (when all fields filled)
    if (key.name === "return") {
      if (target) {
        beginExecution();
      }
    }
  });

  // Otherwise, show the form
  return (
    <box
      alignItems="center"
      justifyContent="center"
      flexDirection="column"
      width="100%"
      maxHeight="100%"
      flexGrow={1}
      flexShrink={1}
      overflow="hidden"
      gap={1}
    >
      {hasStarted && (
        <AgentDisplay
          messages={messages}
          isStreaming={isExecuting}
          subagents={subagents}
        >
          {isCompleted && (
            <box
              border={true}
              borderColor="green"
              flexDirection="column"
              padding={1}
              gap={1}
              alignItems="center"
            >
              <text fg="green">✓ Thorough Pentest Completed</text>
              <text fg="white">
                Comprehensive report generated successfully
              </text>
              <text fg="gray">
                Attack surface analysis + multiple pentest agents
              </text>
              <box flexDirection="row" gap={1}>
                <text fg="gray">Press</text>
                <text fg="green">[ENTER]</text>
                <text fg="gray">to view report</text>
                <text fg="gray">or</text>
                <text fg="green">[ESC]</text>
                <text fg="gray">to close</text>
              </box>
              <text fg="gray">
                {sessionPath}/comprehensive-pentest-report.md
              </text>
            </box>
          )}
        </AgentDisplay>
      )}

      {!hasStarted && (
        <box flexDirection="column" width="50%" gap={1}>
          <text fg="green">Thorough Pentest (Orchestrator)</text>
          <text fg="white">
            Run a comprehensive penetration test with automated orchestration:
          </text>
          <text fg="gray">
            1. Attack surface analysis to discover all assets
          </text>
          <text fg="gray">
            2. Strategic spawning of pentest agents for high-value targets
          </text>
          <text fg="gray">3. Aggregated comprehensive reporting</text>
          <Input
            label="Target"
            onPaste={(text: string) => {
              const cleaned = String(text);
              setTarget((prev) => `${prev}${cleaned}`);
            }}
            description="The target organization/domain to assess"
            placeholder="example.com"
            value={target}
            onInput={setTarget}
            focused={focusedIndex === 0}
          />

          <box flexDirection="row" width="100%" gap={1}>
            <text fg="gray">
              <span fg="green">[TAB]</span> Next · <span fg="green">[ESC]</span>{" "}
              Close ·
            </text>
            <text fg="green">[ENTER]</text>
            <text fg="gray">Begin</text>
          </box>
          <box
            border={true}
            borderColor="yellow"
            padding={1}
            flexDirection="column"
          >
            <text fg="yellow">⚠️ Note: Thorough Pentest Mode</text>
            <text fg="gray">
              This will run multiple autonomous agents in sequence and may take
              significant time to complete.
            </text>
          </box>
        </box>
      )}
    </box>
  );
}
